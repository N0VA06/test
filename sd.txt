import os
import sys
from dotenv import load_dotenv
from qdrant_client import QdrantClient
from qdrant_client.http import models as rest
import requests
import time

# Load environment variables
load_dotenv()

# Qdrant connection details
QDRANT_URL = os.getenv("QDRANT_URL")
QDRANT_API_KEY = os.getenv("QDRANT_API_KEY")

# Collection name
COLLECTION_NAME = "document_collection"

def test_connection():
    """
    Test the connection to Qdrant and diagnose any issues
    """
    print("\n=== Qdrant Connection Diagnostics ===\n")
    
    # Check if environment variables are set
    print("Checking environment variables...")
    if not QDRANT_URL:
        print("❌ QDRANT_URL is not set in your .env file")
        print("   Please add QDRANT_URL=your_qdrant_url to your .env file")
        return False
    else:
        print(f"✓ QDRANT_URL is set to: {QDRANT_URL}")
    
    if not QDRANT_API_KEY and "qdrant.cloud" in QDRANT_URL:
        print("⚠️ QDRANT_API_KEY is not set, but you're using Qdrant Cloud")
        print("   This might cause authentication issues")
    elif QDRANT_API_KEY:
        print("✓ QDRANT_API_KEY is set")
    
    # Try a simple HTTP request first
    print("\nTesting basic HTTP connectivity...")
    try:
        # Strip API path if present
        base_url = QDRANT_URL
        if base_url.endswith('/'):
            base_url = base_url[:-1]
            
        # Remove API version paths if present
        if "/v1" in base_url:
            base_url = base_url.split("/v1")[0]
            
        health_url = f"{base_url}/health"
        
        headers = {}
        if QDRANT_API_KEY:
            headers["api-key"] = QDRANT_API_KEY
        
        response = requests.get(health_url, headers=headers, timeout=5)
        if response.status_code == 200:
            print(f"✓ Basic HTTP connection successful (status: {response.status_code})")
            print(f"✓ Server responded: {response.json()}")
        else:
            print(f"⚠️ Server responded with status code: {response.status_code}")
            print(f"   Response: {response.text}")
    except requests.exceptions.RequestException as e:
        print(f"❌ HTTP connection failed: {e}")
        print("\nPossible solutions:")
        print("1. Check if the Qdrant server is running")
        print("2. Verify the URL is correct (should include http:// or https://)")
        print("3. Check your network connection and firewall settings")
        print("4. If using Qdrant Cloud, make sure your API key is correct")
        return False
    
    # Try connecting with the Qdrant client
    print("\nTesting Qdrant client connection...")
    try:
        client = QdrantClient(url=QDRANT_URL, api_key=QDRANT_API_KEY, timeout=10)
        client_info = client.get_cluster_info()
        print(f"✓ Qdrant client connection successful!")
        print(f"✓ Connected to Qdrant version: {client_info.version}")
        
        # Check if our collection exists
        print(f"\nChecking if collection '{COLLECTION_NAME}' exists...")
        if client.collection_exists(COLLECTION_NAME):
            print(f"✓ Collection '{COLLECTION_NAME}' exists")
            
            # Get collection info
            collection_info = client.get_collection(COLLECTION_NAME)
            print(f"✓ Collection has {collection_info.vectors_count} vectors")
            print(f"✓ Vector size: {collection_info.config.params.vectors.size}")
            
            # Test a simple search
            print("\nTesting a simple search...")
            # Generate a random vector of the right size
            import random
            vector_size = collection_info.config.params.vectors.size
            random_vector = [random.random() for _ in range(vector_size)]
            
            # Search
            search_results = client.search(
                collection_name=COLLECTION_NAME,
                query_vector=random_vector,
                limit=1
            )
            
            if search_results:
                print(f"✓ Search successful, found {len(search_results)} results")
                return True
            else:
                print("⚠️ Search returned no results (this might be normal for a random vector)")
                return True
        else:
            print(f"❌ Collection '{COLLECTION_NAME}' does not exist")
            print("You need to create and populate the collection first")
            return False
            
    except Exception as e:
        print(f"❌ Qdrant client connection failed: {e}")
        print("\nPossible solutions:")
        print("1. Check if the Qdrant server is running")
        print("2. Verify the URL is correct")
        print("3. If using Qdrant Cloud, make sure your API key is correct")
        print("4. Check if your collection has been created")
        return False

def fix_common_issues():
    """Attempt to fix common issues"""
    print("\n=== Attempting to fix common issues ===\n")
    
    fixed = False
    
    # Fix 1: Try to create the collection if it doesn't exist
    try:
        print("Attempting to create the collection...")
        client = QdrantClient(url=QDRANT_URL, api_key=QDRANT_API_KEY, timeout=10)
        
        if not client.collection_exists(COLLECTION_NAME):
            from qdrant_client.models import VectorParams, Distance
            client.create_collection(
                collection_name=COLLECTION_NAME,
                vectors_config=VectorParams(size=1536, distance=Distance.COSINE)
            )
            print(f"✓ Created collection '{COLLECTION_NAME}'")
            fixed = True
        else:
            print(f"Collection '{COLLECTION_NAME}' already exists")
            
    except Exception as e:
        print(f"❌ Failed to create collection: {e}")
    
    return fixed

def main():
    """Main function to run the diagnosis"""
    print("\n==== Qdrant Connection Diagnostic Tool ====")
    print("This tool will help diagnose connection issues with Qdrant")
    
    # First test
    print("\n----- Initial Test -----")
    if test_connection():
        print("\n✅ Connection to Qdrant is working correctly!")
        return
    
    # Try to fix issues
    print("\n----- Attempting Fixes -----")
    if fix_common_issues():
        # Test again after fixes
        print("\n----- Testing After Fixes -----")
        if test_connection():
            print("\n✅ Issues have been fixed. Connection to Qdrant is now working!")
            return
    
    print("\n❌ Connection issues could not be automatically fixed")
    print("\nManual troubleshooting steps:")
    print("1. Check your .env file and make sure QDRANT_URL and QDRANT_API_KEY are correct")
    print("2. For Qdrant Cloud: Verify your API key and collection permissions")
    print("3. For local Qdrant: Make sure the server is running (docker ps or systemctl status qdrant)")
    print("4. Check firewall rules and network connectivity")
    print("5. If running in a container or cloud, check network policies")
    
    # Provide env var info for debugging
    print("\nFor support, here's your (redacted) configuration:")
    if QDRANT_URL:
        print(f"QDRANT_URL: {QDRANT_URL}")
    else:
        print("QDRANT_URL: Not set")
    
    if QDRANT_API_KEY:
        masked_key = QDRANT_API_KEY[:4] + "..." + QDRANT_API_KEY[-4:] if len(QDRANT_API_KEY) > 8 else "***"
        print(f"QDRANT_API_KEY: {masked_key} (redacted)")
    else:
        print("QDRANT_API_KEY: Not set")

if __name__ == "__main__":
    main()
