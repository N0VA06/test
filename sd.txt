
import os
import requests
import PyPDF2
import certifi
import tempfile
import uuid
from typing import List, Dict, Any, Optional
from qdrant_client import QdrantClient
from qdrant_client.http import models
from openai import AzureOpenAI

# Configuration
COLLECTION_NAME = "documents"
AZURE_OPENAI_API_KEY = os.getenv("AZURE_OPENAI_API_KEY")
AZURE_OPENAI_ENDPOINT = os.getenv("AZURE_OPENAI_ENDPOINT")
AZURE_OPENAI_API_VERSION = "2023-05-15"  # Update to your API version
AZURE_OPENAI_DEPLOYMENT_NAME = "text-embedding-ada-002"  # Update to your deployment
VECTOR_SIZE = 1536  # Size of embeddings from text-embedding-ada-002
QDRANT_HOST = "localhost"
QDRANT_PORT = 6333
PEM_FILE_PATH = "path/to/your/certificate.pem"  # Update with your PEM file path

# Initialize clients
client = QdrantClient(host=QDRANT_HOST, port=QDRANT_PORT)

# Initialize Azure OpenAI client with SSL certificate
azure_client = AzureOpenAI(
    api_key=AZURE_OPENAI_API_KEY,
    api_version=AZURE_OPENAI_API_VERSION,
    azure_endpoint=AZURE_OPENAI_ENDPOINT,
    ssl_ca_cert=PEM_FILE_PATH  # Specify your SSL certificate
)

# Set up requests to use the PEM file for SSL verification
os.environ["REQUESTS_CA_BUNDLE"] = PEM_FILE_PATH

def create_collection_if_not_exists():
    """Create Qdrant collection if it doesn't already exist."""
    collections = client.get_collections().collections
    if not any(collection.name == COLLECTION_NAME for collection in collections):
        client.create_collection(
            collection_name=COLLECTION_NAME,
            vectors_config=models.VectorParams(
                size=VECTOR_SIZE,
                distance=models.Distance.COSINE
            )
        )
        print(f"Collection '{COLLECTION_NAME}' created.")
    else:
        print(f"Collection '{COLLECTION_NAME}' already exists.")

def extract_text_from_pdf(pdf_file_path: str) -> List[str]:
    """Extract text from PDF and split into chunks."""
    chunks = []
    
    try:
        with open(pdf_file_path, 'rb') as file:
            pdf_reader = PyPDF2.PdfReader(file)
            
            # Extract text from each page
            for page_num in range(len(pdf_reader.pages)):
                page = pdf_reader.pages[page_num]
                text = page.extract_text()
                
                # Simple chunking by paragraphs
                # You might want to implement a more sophisticated chunking strategy
                paragraphs = text.split('\n\n')
                for paragraph in paragraphs:
                    if paragraph.strip():
                        chunks.append(paragraph.strip())
    
    except Exception as e:
        print(f"Error extracting text from PDF: {e}")
    
    return chunks

def get_embedding(text: str) -> List[float]:
    """Get embedding from Azure OpenAI API."""
    try:
        response = azure_client.embeddings.create(
            input=text,
            model=AZURE_OPENAI_DEPLOYMENT_NAME
        )
        return response.data[0].embedding
    except Exception as e:
        print(f"Error getting embedding: {e}")
        return []

def upload_file(file_path: str, metadata: Optional[Dict[str, Any]] = None) -> bool:
    """Upload and process a file to Qdrant."""
    # Ensure collection exists
    create_collection_if_not_exists()
    
    # Extract text chunks from file
    if file_path.lower().endswith('.pdf'):
        chunks = extract_text_from_pdf(file_path)
    else:
        # For text files or other formats
        with open(file_path, 'r', encoding='utf-8') as file:
            text = file.read()
            # Simple chunking by paragraphs
            chunks = [p.strip() for p in text.split('\n\n') if p.strip()]
    
    if not chunks:
        print("No text chunks extracted from the file.")
        return False
    
    print(f"Extracted {len(chunks)} chunks from the file.")
    
    # Process each chunk
    points = []
    for i, chunk in enumerate(chunks):
        # Get embedding
        embedding = get_embedding(chunk)
        if not embedding:
            continue
        
        # Generate a unique ID for this chunk
        point_id = str(uuid.uuid4())
        
        # Create point with embedding, payload, and metadata
        point = models.PointStruct(
            id=point_id,
            vector=embedding,
            payload={
                "text": chunk,
                "chunk_index": i,
                "file_name": os.path.basename(file_path),
                "file_path": file_path,
                **(metadata or {})
            }
        )
        points.append(point)
    
    # Upload points in batch
    if points:
        client.upsert(
            collection_name=COLLECTION_NAME,
            points=points
        )
        print(f"Uploaded {len(points)} vectors to Qdrant.")
        return True
    
    return False

def search_documents(query: str, limit: int = 5) -> List[Dict[str, Any]]:
    """Search for relevant documents in Qdrant."""
    # Get embedding for the query
    query_embedding = get_embedding(query)
    if not query_embedding:
        return []
    
    # Search in Qdrant
    search_results = client.search(
        collection_name=COLLECTION_NAME,
        query_vector=query_embedding,
        limit=limit
    )
    
    # Format results
    results = []
    for result in search_results:
        results.append({
            "score": result.score,
            "text": result.payload.get("text", ""),
            "file_name": result.payload.get("file_name", ""),
            "chunk_index": result.payload.get("chunk_index", 0),
            "metadata": {k: v for k, v in result.payload.items() 
                         if k not in ["text", "file_name", "chunk_index"]}
        })
    
    return results

# Example usage functions
def upload_pdf_example(pdf_path: str, metadata: Optional[Dict[str, Any]] = None):
    """Example function to upload a PDF file."""
    print(f"Uploading PDF: {pdf_path}")
    success = upload_file(pdf_path, metadata)
    if success:
        print("PDF uploaded successfully!")
    else:
        print("Failed to upload PDF.")

def query_example(query: str, limit: int = 5):
    """Example function to query the database."""
    print(f"Searching for: '{query}'")
    results = search_documents(query, limit)
    
    if not results:
        print("No results found.")
        return
    
    print(f"Found {len(results)} results:")
    for i, result in enumerate(results, 1):
        print(f"\nResult {i} (Score: {result['score']:.4f}):")
        print(f"File: {result['file_name']}")
        print(f"Text: {result['text'][:200]}...")  # Show first 200 chars

# Interactive CLI Interface
if __name__ == "__main__":
    import json
    
    # Ensure collection exists
    create_collection_if_not_exists()
    
    while True:
        print("\n=== Qdrant with Azure OpenAI Embedding System ===")
        print("1. Upload a file")
        print("2. Query the database")
        print("3. Exit")
        
        choice = input("\nEnter your choice (1-3): ").strip()
        
        if choice == "1":
            # Upload a file
            file_path = input("\nEnter the path to the file: ").strip()
            
            if not os.path.exists(file_path):
                print(f"Error: File '{file_path}' does not exist.")
                continue
                
            # Get metadata
            print("\nEnter metadata (optional):")
            print("Format: key1=value1, key2=value2, ...")
            print("Example: author=John Doe, category=Technical")
            metadata_input = input("Metadata: ").strip()
            
            metadata = {}
            if metadata_input:
                try:
                    # Parse comma-separated key-value pairs
                    pairs = [pair.strip() for pair in metadata_input.split(",")]
                    for pair in pairs:
                        if "=" in pair:
                            key, value = pair.split("=", 1)
                            metadata[key.strip()] = value.strip()
                except Exception as e:
                    print(f"Error parsing metadata: {e}")
                    continue
            
            print(f"\nUploading file: {file_path}")
            print(f"Metadata: {metadata}")
            
            success = upload_file(file_path, metadata)
            if success:
                print("File uploaded successfully!")
            else:
                print("Failed to upload file.")
                
        elif choice == "2":
            # Query the database
            query = input("\nEnter your query: ").strip()
            limit_input = input("Enter maximum number of results (default: 5): ").strip()
            
            limit = 5
            if limit_input:
                try:
                    limit = int(limit_input)
                except ValueError:
                    print("Invalid limit. Using default value of 5.")
            
            results = search_documents(query, limit)
            
            if not results:
                print("\nNo results found.")
            else:
                print(f"\nFound {len(results)} results:")
                for i, result in enumerate(results, 1):
                    print(f"\nResult {i} (Score: {result['score']:.4f}):")
                    print(f"File: {result['file_name']}")
                    print(f"Text: {result['text']}")
                    metadata = {k: v for k, v in result.get("metadata", {}).items() 
                               if k not in ["text", "file_name", "chunk_index"]}
                    if metadata:
                        print("Metadata:")
                        for key, value in metadata.items():
                            print(f"  {key}: {value}")
                            
        elif choice == "3":
            # Exit
            print("\nExiting the application. Goodbye!")
            break
            
        else:
            print("\nInvalid choice. Please enter a number between 1 and 3.")
